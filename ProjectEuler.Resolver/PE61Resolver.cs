using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace ProjectEuler.Resolver
{
    /**
     * 
     * Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:

Triangle	 	P3,n=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Square	 	P4,n=n2	 	1, 4, 9, 16, 25, ...
Pentagonal	 	P5,n=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
Hexagonal	 	P6,n=n(2n−1)	 	1, 6, 15, 28, 45, ...
Heptagonal	 	P7,n=n(5n−3)/2	 	1, 7, 18, 34, 55, ...
Octagonal	 	P8,n=n(3n−2)	 	1, 8, 21, 40, 65, ...
The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different number in the set.
This is the only set of 4-digit numbers with this property.
Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.
     * */
    [TestClass]
    public class PE61Resolver
    {
        
        [TestMethod]
        public void TestMethod1()
        {
            List<DataNode> p3 = buildCandidates((n) => { return n * (n + 1) / 2; },3),
                p4 = buildCandidates(n => { return n * n; }, 4),
                p5 = buildCandidates(n=> {return n*(3*n-1)/2;},5),
                p6 = buildCandidates(n=> {return n*(n + n -1);},6),
                p7 = buildCandidates(n=> {return n*(5*n-3)/2;},7),
                p8 = buildCandidates(n=> {return n*(3*n-2);},8);

            // build graphic
            foreach (var target in new List<DataNode>[]{p3,p4,p5,p6,p7,p8})
            {
                foreach (var source in new List<DataNode>[]{p3,p4,p5,p6,p7,p8})
                {
                    if (target != source)
                    {
                        buildGraphic(target, source);
                    }
                }
            }

            bool found = true;
            // Search for cycle with lenght of 6
            foreach (var node1 in p3)
            {
                foreach (var node2 in node1.siblingNodes)
                {
                    foreach (var node3 in node2.siblingNodes)
                    {
                        foreach (var node4 in node3.siblingNodes)
                        {
                            foreach (var node5 in node4.siblingNodes)
                            {
                                foreach (var node6 in node5.siblingNodes)
                                {
                                    foreach (var node7 in node6.siblingNodes)
                                    {
                                        if (node7 == node1 && (node1.PolygonNumb*node2.PolygonNumb*node3.PolygonNumb*node4.PolygonNumb*node5.PolygonNumb*node6.PolygonNumb==3*4*5*6*7*8))
                                        {
                                            Console.WriteLine("{0}",node1.Value + node2.Value + node3.Value + node4.Value + node5.Value + node6.Value);
                                            found = true;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        private void buildGraphic(List<DataNode> target, List<DataNode> source) {
            foreach (DataNode leftNode in target)
            {
                foreach (var rightNode in source)
                {
                    if (leftNode.Right == rightNode.Left)
                    {
                        leftNode.siblingNodes.Add(rightNode);   
                    }
                }
            }
        }
        private List<DataNode> buildCandidates(Func<int, int> func, int polygon)
        {
            List<DataNode> result = new List<DataNode>();
            for (int i = 1; i < int.MaxValue; i++)
            {
                int value = func(i);
                if (value >= 10000)
                {
                    break;
                }
                if (value >= 1000)
                {
                    DataNode node = new DataNode(value, polygon);
                    result.Add(node);
                }
            }

            return result;
        }
    }

    class DataNode {
        public bool Visited = false;
        public int Value { get; private set; }
        public int Left { get; private set; }
        public int Right { get; private set; }
        public int PolygonNumb { get; private set; }
        public List<DataNode> siblingNodes = new List<DataNode>();

        public DataNode(int value, int polygonNum) {
            this.Value = value;
            this.PolygonNumb = polygonNum;
            this.Left = value / 100;
            this.Right = value % 100;
        }

    }
}
